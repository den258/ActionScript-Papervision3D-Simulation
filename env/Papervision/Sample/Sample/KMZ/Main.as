package {	import flash.display.*;	import flash.events.*;	import flash.utils.*;		import org.papervision3d.scenes.Scene3D;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.cameras.*;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.objects.parsers.KMZ;	import org.papervision3d.events.*;		import caurina.transitions.*;	import caurina.transitions.properties.*;	[SWF(width="1024", height="568", backgroundColor="#000000", frameRate="50")]	public class Main extends Sprite {			private var scene:Scene3D;		private var camera:Camera3D;		private var viewport:Viewport3D;		private var renderer:BasicRenderEngine;		private var model:KMZ;		private var kmzFile:String = "keitai.kmz";		private var friction:Number = 0.93;		private var powerX:Number = 0;		private var powerY:Number = 0;		private var mode:String = "yellow";				private var stageW:Number;		private var stageH:Number;		private var vpX:Number;		private var vpY:Number;				private var cameraInfo:CameraInfo;			private var time:Number = 0;		private var secondTime:Number = 0;		private var previousSecondTime:Number = 0;		private var frameNum:Number = 0;		private var fps:String = "...";				private var isDragging:Boolean;		private var mouseDownX:Number;		private var mouseDownY:Number;				public function Main () {			init();		}			private function init():void {			CurveModifiers.init();			setStage();			setScene();			setCamera();			setKMZ();			setCameraInfo();						addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);			stage.addEventListener(Event.RESIZE, onStageResizeHandler);			stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDownHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUpHandler);		}				private function setStage():void {			stage.quality = StageQuality.MEDIUM;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;		}				private function setCameraInfo():void {			cameraInfo = new CameraInfo();			addChild(cameraInfo);			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function setScene():void{			renderer = new BasicRenderEngine();			scene = new Scene3D();			viewport  = new Viewport3D(0, 0, true, true);			addChild(viewport);		}				private function setCamera():void {			camera = new Camera3D();			camera.x = 0;			camera.y = 0;			camera.z = -2000;			camera.zoom = 30;			camera.focus = 30;			camera.target = DisplayObject3D.ZERO;		}				private function setKMZ():void {			model = new KMZ();			model.load(kmzFile);			model.scale = 0.15;			scene.addChild(model);			model.addEventListener(FileLoadEvent.LOAD_COMPLETE,	onCompleteHandler);		}				private function onCompleteHandler(event:FileLoadEvent):void {			OpeningMotion();		}				private function OpeningMotion():void {			var modelX:Number = model.x;			var modelY:Number = model.y;			var modelZ:Number = model.z;			model.x = -40000;			model.y = 0;			model.z = 40000;			model.rotationY = 2160;			Tweener.addTween(model, {				x:				modelX,				y:				modelY,				z:				modelZ,				rotationY:		0,				_bezier:[					{x:15000}				],				time:			6, 				onComplete:		onCompleteOpeningMotion,				transition:		"easeOutQuint"			});		}				private function onCompleteOpeningMotion():void {			mode = "green";		}				private function getFPS():void {			time = getTimer();			secondTime = time - previousSecondTime;			if(secondTime >= 1000) {				fps = frameNum.toString();				frameNum = 0;				previousSecondTime = time;			} else {				frameNum++;			}			cameraInfo.fpsText.text = fps+"FPS";			cameraInfo.Mode.text = mode.toString();			cameraInfo.cameraX.text = camera.x.toString();			cameraInfo.cameraY.text = camera.y.toString();			cameraInfo.cameraZ.text = camera.z.toString();		}			private function onEnterFrameHandler(event:Event):void {			if(mode == "green") {				motionCamera();			}			renderer.renderScene(scene, camera, viewport);			getFPS();		}				private function onStageResizeHandler(event:Event):void {			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function onMouseDownHandler(event:MouseEvent):void {			isDragging = true;			mouseDownX = mouseX;			mouseDownY = mouseY;		}				private function onMouseUpHandler(event:MouseEvent):void {			isDragging = false;		}				private function motionCamera():void {			if(!isDragging) {				powerX = powerX * friction;				if (Math.abs(powerX) < 0.05) {					powerX = 0;				}				powerY = powerY * friction;				if (Math.abs(powerY) < 0.05) {					powerY = 0;				}			} else {				powerX = (mouseY - mouseDownY) * 0.02;				powerY = (mouseX - mouseDownX) * 0.02;			}			cameraRotateX(camera, powerX);			cameraRotateY(camera, powerY);		}				private function cameraRotateX(cameraObj:Camera3D, angleX:Number):void {			var rad:Number = angleX * Math.PI / 180;			var pZ:Number = cameraObj.z;			var pY:Number = cameraObj.y;			var cosX:Number = Math.cos(rad);			var sinX:Number = Math.sin(rad);			cameraObj.z = pZ * cosX + pY * sinX;			cameraObj.y = pY * cosX - pZ * sinX;		}				private function cameraRotateY(cameraObj:Camera3D, angleY:Number):void {			var rad:Number = angleY * Math.PI / 180;			var pX:Number = cameraObj.x;			var pZ:Number = cameraObj.z;			var cosY:Number = Math.cos(rad);			var sinY:Number = Math.sin(rad);			cameraObj.x = pX * cosY + pZ * sinY;			cameraObj.z = pZ * cosY - pX * sinY;		}	}}