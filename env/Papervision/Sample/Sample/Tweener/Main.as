package {	import flash.display.*;	import flash.events.*;	import flash.utils.*;		import org.papervision3d.scenes.Scene3D;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.*;	import org.papervision3d.cameras.*;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.materials.*;		import caurina.transitions.*;	import caurina.transitions.properties.*;	[SWF(width="1024", height="568", backgroundColor="#333333", frameRate="50")]	public class Main extends Sprite {			private var scene:Scene3D;		private var camera:Camera3D;		private var viewport:Viewport3D;		private var renderer:BasicRenderEngine;		private var container:DisplayObject3D;		private var displayButton:DisplayButton;						private var activePlaneNumber:int = 0;		private var cameraPositionZ:Number;		private var slidePositionArray:Array;		private var planes:Array;		private var transitionTime:Number = 6;				private var startX:Number = 0;		private var startY:Number = 0;		private var planeWidth:Number = 1024;		private var planeHeight:Number = 568;		private var intervalX:Number = 100;		private var intervalY:Number = 100;				private var stageW:Number;		private var stageH:Number;		private var vpX:Number;		private var vpY:Number;				private var cameraInfo:CameraInfo;				private var time:Number = 0;		private var secondTime:Number = 0;		private var previousSecondTime:Number = 0;		private var frameNum:Number = 0;		private var fps:String = "...";				// -- SWC書き出しのためのインスタンス化 Start -- //		private var s_1:S_1 = new S_1(0, 0);		private var s_2:S_2 = new S_2(0, 0);		private var s_3:S_3 = new S_3(0, 0);		private var s_4:S_4 = new S_4(0, 0);		private var s_5:S_5 = new S_5(0, 0);		private var s_6:S_6 = new S_6(0, 0);		private var s_7:S_7 = new S_7(0, 0);		private var s_8:S_8 = new S_8(0, 0);		private var s_9:S_9 = new S_9(0, 0);		private var s_10:S_10 = new S_10(0, 0);		// -- SWC書き出しのためのインスタンス化 End -- //				public function Main () {						init();		}			private function init():void {			CurveModifiers.init();			setStage();			setScene();			setCamera();			setDO3D();			setCameraInfo();			setButton();						addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);			stage.addEventListener(Event.RESIZE, onStageResizeHandler);		}				private function setStage():void {			stage.quality = StageQuality.MEDIUM;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;		}				private function setCameraInfo():void {			cameraInfo = new CameraInfo();			addChild(cameraInfo);			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function setScene():void{			renderer = new BasicRenderEngine();			scene = new Scene3D();			viewport  = new Viewport3D(0, 0, true, true);			addChild(viewport);		}				private function setCamera():void {			camera = new Camera3D();			camera.x = startX;			camera.y = startY;			camera.zoom = 30;			camera.focus = 20;			camera.z = cameraPositionZ = -(camera.zoom * camera.focus);		}				private function setDO3D():void {			planes = new Array();						slidePositionArray = [				{id:"S_1", 	x:startX, y:startY},				{id:"S_2", 	x:startX + (planeWidth + intervalX) * 1, 	y:startY},				{id:"S_3", 	x:startX + (planeWidth + intervalX) * 2, 	y:startY},				{id:"S_4", 	x:startX + (planeWidth + intervalX) * 3, 	y:startY},				{id:"S_5", 	x:startX + (planeWidth + intervalX) * 4, 	y:startY},				{id:"S_6", 	x:startX, 									y:startY + (planeHeight + intervalY) * -1},				{id:"S_7", 	x:startX + (planeWidth + intervalX) * 1, 	y:startY + (planeHeight + intervalY) * -1},				{id:"S_8", 	x:startX + (planeWidth + intervalX) * 2, 	y:startY + (planeHeight + intervalY) * -1},				{id:"S_9", 	x:startX + (planeWidth + intervalX) * 3, 	y:startY + (planeHeight + intervalY) * -1},				{id:"S_10",	x:startX + (planeWidth + intervalX) * 4, 	y:startY + (planeHeight + intervalY) * -1}			];						container = new DisplayObject3D();			scene.addChild(container);						var tempObj:Object;			for (var i:int = 0; i < slidePositionArray.length; i++) {				tempObj = slidePositionArray[i];				var slideName:String = tempObj.id;				var material:BitmapAssetMaterial = new BitmapAssetMaterial(slideName, true);				material.smooth = true;				material.oneSide = false;				var plane:Plane = new Plane(material, 1024, 568, 4, 4);				plane.x = tempObj.x;				plane.y = tempObj.y;				container.addChild(plane);				planes.push(plane);			}		}				private function setButton():void {			displayButton = new DisplayButton();			displayButton.width = stageW;			displayButton.height = stageH;			displayButton.buttonMode = true;			addChild(displayButton);			displayButton.addEventListener(MouseEvent.CLICK, onDisplayClickHandler);		}				private function getFPS():void {			time = getTimer();			secondTime = time - previousSecondTime;			if(secondTime >= 1000) {				fps = frameNum.toString();				frameNum = 0;				previousSecondTime = time;			} else {				frameNum++;			}			cameraInfo.fpsText.text = fps+"FPS";			cameraInfo.cameraX.text = camera.x.toString();			cameraInfo.cameraY.text = camera.y.toString();			cameraInfo.cameraZ.text = camera.z.toString();		}				private function onEnterFrameHandler(event:Event):void {			renderer.renderScene(scene, camera, viewport);			getFPS();		}				private function onStageResizeHandler(event:Event):void {			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;			displayButton.width = stageW;			displayButton.height = stageH;		}				private function onDisplayClickHandler(event:MouseEvent):void {			var targetPlane:Plane;			activePlaneNumber++;			if(activePlaneNumber < planes.length) {				targetPlane = planes[activePlaneNumber];			} else {				activePlaneNumber = 0;				targetPlane = planes[activePlaneNumber];			}						var targetX:Number = targetPlane.x;			var targetY:Number = targetPlane.y;			var targetZ:Number = cameraPositionZ;			var targetRotationZ:Number = 360 * activePlaneNumber;			Tweener.addTween(camera, {				x:				targetX, 				y:				targetY, 				z:				targetZ, 				rotationZ:		targetRotationZ, 				_bezier:{					z:			cameraPositionZ * 2				},				time:			transitionTime, 				transition:		"easeInOutCubic"			});			Tweener.addTween(container, {				rotationX:		0, 				_bezier:{					rotationX:	-60				},				time:			transitionTime, 				transition:		"easeInOutCubic"			});		}	}}