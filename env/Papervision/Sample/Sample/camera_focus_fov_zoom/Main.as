package {	import flash.display.*;	import flash.events.*;	import flash.text.*;	import fl.controls.Slider;	import fl.events.SliderEvent;		import org.papervision3d.scenes.Scene3D;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.Plane;	import org.papervision3d.cameras.Camera3D;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.materials.WireframeMaterial;	[SWF(width="1024", height="568", backgroundColor="#333333", frameRate="50")]	public class Main extends Sprite {			private var scene:Scene3D;		private var camera:Camera3D;		private var viewport:Viewport3D;		private var renderer:BasicRenderEngine;				private var stageW:Number;		private var stageH:Number;		private var vpX:Number;		private var vpY:Number;				private var cameraInfo:CameraInfo;		private var sliders:Sliders;				private var myZoomSlider:Slider;		private var myFocusSlider:Slider;		private var myCameraZSlider:Slider;			public function Main () {						init();		}			private function init():void {			setSliders();			setStage();			setScene();			setCamera();			setDO3D();			setCameraInfo();						addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);			stage.addEventListener(Event.RESIZE, onStageResizeHandler);						swapChildren(viewport, sliders);		}				private function setStage():void {			stage.quality = StageQuality.MEDIUM;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;		}				private function setCameraInfo():void {			cameraInfo = new CameraInfo();			addChild(cameraInfo);			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;					}				private function setSliders():void {			sliders = new Sliders();			addChild(sliders);						myZoomSlider = sliders.myZoomSlider;			myFocusSlider = sliders.myFocusSlider;			myCameraZSlider = sliders.myCameraZSlider;						myZoomSlider.addEventListener(SliderEvent.THUMB_DRAG, myZoomSliderDragHandler);			myFocusSlider.addEventListener(SliderEvent.THUMB_DRAG, myFocusSliderDragHandler);			myCameraZSlider.addEventListener(SliderEvent.THUMB_DRAG, myCameraZSliderDragHandler);		}				private function setScene():void{			renderer = new BasicRenderEngine();			scene = new Scene3D();			viewport  = new Viewport3D(0, 0, true, true);			addChild(viewport);		}				private function setCamera():void {			camera = new Camera3D();			camera.x = 0;			camera.y = 0;			camera.z = myCameraZSlider.value = -300;			camera.focus = myFocusSlider.value = 440;			camera.zoom = myZoomSlider.value = 2;		}				private function setDO3D():void {			var material:WireframeMaterial = new WireframeMaterial(0xCCCCCC, 1);			material.oneSide = false;						var plane1:Plane = new Plane(material, 200, 2000, 5, 50);			plane1.rotationX = 90;			plane1.x = 120;			plane1.y = 90;			plane1.z = 1000;			scene.addChild(plane1);			var plane2:Plane = new Plane(material, 200, 2000, 5, 50);			plane2.rotationX = 90;			plane2.x = -120;			plane2.y = 90;			plane2.z = 1000;			scene.addChild(plane2);						var plane3:Plane = new Plane(material, 200, 2000, 5, 50);			plane3.rotationX = 90;			plane3.x = 120;			plane3.y = -90;			plane3.z = 1000;			scene.addChild(plane3);			var plane4:Plane = new Plane(material, 200, 2000, 5, 50);			plane4.rotationX = 90;			plane4.x = -120;			plane4.y = -90;			plane4.z = 1000;			scene.addChild(plane4);						var plane5:Plane = new Plane(material, 120, 2000, 3, 50);			plane5.rotationX = 90;			plane5.rotationZ = 90;			plane5.x = 220;			plane5.y = 0;			plane5.z = 1000;			scene.addChild(plane5);						var plane6:Plane = new Plane(material, 120, 2000, 3, 50);			plane6.rotationX = 90;			plane6.rotationZ = -90;			plane6.x = -220;			plane6.y = 0;			plane6.z = 1000;			scene.addChild(plane6);		}				private function slidersAndTextValue():void {			cameraInfo.cameraZoom.text = camera.zoom.toString();			cameraInfo.cameraFocus.text = camera.focus.toString();			cameraInfo.cameraFov.text = camera.fov.toString();			cameraInfo.cameraZ.text = camera.z.toString();			var pixelT:Number = camera.zoom * camera.focus;			cameraInfo.pixelEquality.text = pixelT.toString();						myZoomSlider.value = camera.zoom;			myFocusSlider.value = camera.focus;			myCameraZSlider.value = camera.z;		}			private function onEnterFrameHandler(event:Event):void {			renderer.renderScene(scene, camera, viewport);			slidersAndTextValue();		}				private function myZoomSliderDragHandler(event:SliderEvent):void {			camera.zoom = myZoomSlider.value;		}				private function myFocusSliderDragHandler(event:SliderEvent):void {			camera.focus = myFocusSlider.value;		}				private function myCameraZSliderDragHandler(event:SliderEvent):void {			camera.z = myCameraZSlider.value;		}				private function onStageResizeHandler(event:Event):void {			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}	}}