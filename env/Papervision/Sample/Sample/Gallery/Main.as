package {	import flash.display.*;	import flash.events.*;	import flash.utils.*;		import org.papervision3d.scenes.Scene3D;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.*;	import org.papervision3d.cameras.*;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.materials.*;	import org.papervision3d.materials.utils.MaterialsList;	import org.papervision3d.events.*;		import caurina.transitions.*;	import caurina.transitions.properties.*;	[SWF(width="1024", height="568", backgroundColor="#000000", frameRate="50")]	public class Main extends Sprite {			private var scene:Scene3D;		private var camera:Camera3D;		private var viewport:Viewport3D;		private var renderer:BasicRenderEngine;		private var container:DisplayObject3D;				private var cubeContainer1:DisplayObject3D;		private var cubeContainer2:DisplayObject3D;		private var cubeContainer3:DisplayObject3D;		private var cubeContainer4:DisplayObject3D;		private var cubeContainer5:DisplayObject3D;		private var cubeContainer6:DisplayObject3D;				private var cube1:Cube;		private var cube2:Cube;		private var cube3:Cube;		private var cube4:Cube;		private var cube5:Cube;		private var cube6:Cube;				private var transitionTime:Number = 1;		private var transitionType:String = "easeOutExpo";		private var friction:Number = 0.71;		private var mode:String = "yellow";		private var activeCube:Cube;				private var stageW:Number;		private var stageH:Number;		private var vpX:Number;		private var vpY:Number;				private var cameraInfo:CameraInfo;				private var displayButton:DisplayButton;				private var time:Number = 0;		private var secondTime:Number = 0;		private var previousSecondTime:Number = 0;		private var frameNum:Number = 0;		private var fps:String = "...";				private var isDragging:Boolean;		private var mouseDownX:Number;		private var mouseDownY:Number;				private var powerX:Number = 0;		private var powerY:Number = 0;				private var center:Number;		private var range:Number = 360;		private var tempY:Number;		private var spinningTime:Number;		private var centerY:Number;				private var cameraStandardX:Number;		private var cameraStandardY:Number;		private var cameraStandardZ:Number;				// -- SWC書き出しのためのインスタンス化 Start -- //		private var s_1:S_1 = new S_1(0, 0);		private var s_2:S_2 = new S_2(0, 0);		private var s_3:S_3 = new S_3(0, 0);		private var s_4:S_4 = new S_4(0, 0);		private var s_5:S_5 = new S_5(0, 0);		private var s_6:S_6 = new S_6(0, 0);		private var m_0:M_0 = new M_0();		// -- SWC書き出しのためのインスタンス化 End -- //				public function Main () {						init();		}			private function init():void {			CurveModifiers.init();			setStage();			setScene();			setCamera();			setDO3D();			setCameraInfo();			OpeningMotion();						addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);			stage.addEventListener(Event.RESIZE, onStageResizeHandler);			stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDownHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUpHandler);		}				private function setStage():void {			stage.quality = StageQuality.MEDIUM;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;		}				private function setCameraInfo():void {			cameraInfo = new CameraInfo();			addChild(cameraInfo);			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function setScene():void{			renderer = new BasicRenderEngine();			scene = new Scene3D();			viewport  = new Viewport3D(0, 0, true, true);			viewport.containerSprite.buttonMode = true;			addChild(viewport);		}				private function setCamera():void {			camera = new Camera3D();			camera.zoom = 30;			camera.focus = 120;			cameraStandardX = 0;			cameraStandardY = 0;			cameraStandardZ = -(camera.zoom * camera.focus) - 300;			camera.target = DisplayObject3D.ZERO;		}				private function setDO3D():void {			container = new DisplayObject3D();			scene.addChild(container);						cubeContainer1 = new DisplayObject3D();			cubeContainer2 = new DisplayObject3D();			cubeContainer3 = new DisplayObject3D();			cubeContainer4 = new DisplayObject3D();			cubeContainer5 = new DisplayObject3D();			cubeContainer6 = new DisplayObject3D();						cube1 = new Cube(makeMaterialsList("S_1", "M_0"), 320, 100, 240, 2, 2, 2);			cube2 = new Cube(makeMaterialsList("S_2", "M_0"), 320, 100, 240, 2, 2, 2);			cube3 = new Cube(makeMaterialsList("S_3", "M_0"), 320, 100, 240, 2, 2, 2);			cube4 = new Cube(makeMaterialsList("S_4", "M_0"), 320, 100, 240, 2, 2, 2);			cube5 = new Cube(makeMaterialsList("S_5", "M_0"), 320, 100, 240, 2, 2, 2);			cube6 = new Cube(makeMaterialsList("S_6", "M_0"), 320, 100, 240, 2, 2, 2);						cube1.addEventListener(InteractiveScene3DEvent.OBJECT_CLICK, onClickCubeHandler);			cube2.addEventListener(InteractiveScene3DEvent.OBJECT_CLICK, onClickCubeHandler);			cube3.addEventListener(InteractiveScene3DEvent.OBJECT_CLICK, onClickCubeHandler);			cube4.addEventListener(InteractiveScene3DEvent.OBJECT_CLICK, onClickCubeHandler);			cube5.addEventListener(InteractiveScene3DEvent.OBJECT_CLICK, onClickCubeHandler);			cube6.addEventListener(InteractiveScene3DEvent.OBJECT_CLICK, onClickCubeHandler);						cubeContainerRotateY(cubeContainer1, 0);			cubeContainerRotateY(cubeContainer2, 60);			cubeContainerRotateY(cubeContainer3, 120);			cubeContainerRotateY(cubeContainer4, 180);			cubeContainerRotateY(cubeContainer5, 240);			cubeContainerRotateY(cubeContainer6, 300);						cubeContainer1.name = "cubeContainer1";			cubeContainer2.name = "cubeContainer2";			cubeContainer3.name = "cubeContainer3";			cubeContainer4.name = "cubeContainer4";			cubeContainer5.name = "cubeContainer5";			cubeContainer6.name = "cubeContainer6";			container.addChild(cubeContainer1);			container.addChild(cubeContainer2);			container.addChild(cubeContainer3);			container.addChild(cubeContainer4);			container.addChild(cubeContainer5);			container.addChild(cubeContainer6);						cube1.name = "cube1";			cube2.name = "cube2";			cube3.name = "cube3";			cube4.name = "cube4";			cube5.name = "cube5";			cube6.name = "cube6";			cubeContainer1.addChild(cube1);			cubeContainer2.addChild(cube2);			cubeContainer3.addChild(cube3);			cubeContainer4.addChild(cube4);			cubeContainer5.addChild(cube5);			cubeContainer6.addChild(cube6);		}				private function cubeContainerRotateY(do3d:DisplayObject3D, angleY:Number):void {			do3d.x = 360;			do3d.z = 0;			do3d.rotationY = (angleY + 90) % 360;			var rad:Number = angleY * Math.PI / 180;			var pX:Number = do3d.x;			var pZ:Number = do3d.z;			var cosY:Number = Math.cos(rad);			var sinY:Number = Math.sin(rad);			do3d.x = pX * cosY + pZ * sinY;			do3d.z = pZ * cosY - pX * sinY;		}				private function makeMaterialsList(FrontID:String, OtherID:String):MaterialsList {			var frontMaterial:BitmapAssetMaterial = new BitmapAssetMaterial(FrontID, true);			frontMaterial.interactive = true;			var movieMaterial:MovieAssetMaterial = new MovieAssetMaterial(OtherID, true);			movieMaterial.oneSide = false;						var materialsList:MaterialsList = new MaterialsList({				front:		frontMaterial,				back:		movieMaterial,				right:		movieMaterial,				left:		movieMaterial,				top:		movieMaterial,				bottom:		movieMaterial			});			return materialsList;		}				private function setButton():void {			displayButton = new DisplayButton();			displayButton.width = stageW;			displayButton.height = stageH;			addChild(displayButton);			displayButton.addEventListener(MouseEvent.CLICK, onBlueDisplayClickHandler);		}				private function removeButton():void {			displayButton.removeEventListener(MouseEvent.CLICK, onBlueDisplayClickHandler);			removeChild(displayButton);			displayButton = null;		}				private function OpeningMotion():void {			camera.x = 0;			camera.y = 0;			camera.z = 40000;			Tweener.addTween(camera, {				x:					cameraStandardX,				y:					cameraStandardY,				z:					cameraStandardZ,				_bezier:{					x:				-4000,					y:				-6000				},				time:				7, 				onComplete:			onCompleteOpeningMotion,				transition:			"easeOutQuint"			});						container.rotationZ = 90;			container.rotationY = 180;			Tweener.addTween(container, {				rotationZ:			0,				rotationY:			0,				time:				6, 				transition:			"easeOutQuint"			});		}				private function onCompleteOpeningMotion():void {			mode = "green";		}				private function getFPS():void {			time = getTimer();			secondTime = time - previousSecondTime;			if(secondTime >= 1000) {				fps = frameNum.toString();				frameNum = 0;				previousSecondTime = time;			} else {				frameNum++;			}			cameraInfo.fpsText.text = fps+"FPS";			cameraInfo.Mode.text = mode.toString();			cameraInfo.cameraX.text = camera.x.toString();			cameraInfo.cameraY.text = camera.y.toString();			cameraInfo.cameraZ.text = camera.z.toString();			cameraInfo.containerRotationX.text = container.rotationX.toString();			cameraInfo.containerRotationY.text = container.rotationY.toString();			cameraInfo.containerRotationZ.text = container.rotationZ.toString();			cameraInfo.containerLocalRotationY.text = container.localRotationY.toString();		}				private function onEnterFrameHandler(event:Event):void {			if(mode == "green") {				motionDO3D();				motionCamera();			}			renderer.renderScene(scene, camera, viewport);			getFPS();		}				private function onStageResizeHandler(event:Event):void {			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;			if(displayButton) {				displayButton.width = stageW;				displayButton.height = stageH;			}		}				private function onMouseDownHandler(event:MouseEvent):void {			if(mode == "green") {				isDragging = true;				mouseDownX = mouseX;				mouseDownY = mouseY;			}		}				private function onMouseUpHandler(event:MouseEvent):void {			if(mode == "green") {				isDragging = false;			}		}				private function motionDO3D():void {			if(!isDragging) {				powerY = powerY * friction;				if (Math.abs(powerY) < 0.1) {					powerY = 0;				}			} else {				powerY = (mouseX - mouseDownX) * 0.01;			}			container.localRotationY += powerY;		}				private function motionCamera():void {			if(!isDragging) {				powerX = powerX * friction;				if (Math.abs(powerX) < 1) {					powerX = 0;				}				camera.y = camera.y * friction;				if (Math.abs(camera.y) < 1) {					camera.y = 0;				}				camera.y += powerX;			} else {				powerX = (mouseY - mouseDownY) * 0.2;				var rangeCameraY:Number = 1500;				var angleCameraY:Number = camera.y * 90 / rangeCameraY;				angleCameraY = Math.max(-90, angleCameraY);				angleCameraY = Math.min(90, angleCameraY);				var T:Number = Math.floor(Math.cos(angleCameraY * Math.PI / 180) * 100);				powerX = powerX * T / 100;				camera.y += powerX;				camera.z -= powerX * 10;			}		}		private function tweenCenterY(center:Number, range:Number, tempY:Number, parentDO3D:DisplayObject3D):void {			var shift:Number = center - range / 2;			if (tempY >= center) {				for (var i:int = 0; shift + i * range < tempY; i++) {					spinningTime = i;					centerY = range * spinningTime + shift + range / 2;				}			} else {				for(var j:int = 0; shift + (j + 1) * range > tempY; j--) {					spinningTime = j;					centerY = range * spinningTime + shift + range / 2;				}			}						Tweener.addTween(container, {				localRotationY:		centerY, 				time:				transitionTime, 				onComplete:			onCompleteRotationY,				onCompleteParams:	[parentDO3D],				transition:			transitionType			});						Tweener.addTween(camera, {				x:					cameraStandardX,				y:					cameraStandardY,				z:					cameraStandardZ,				time:				transitionTime * 2 + 0.5, 				transition:			"easeInOutCubic"			});		}		private function onClickCubeHandler(event:InteractiveScene3DEvent):void {			if((mode == "green") && (Math.abs(mouseX - mouseDownX) < 5)) {				mode = "blue";				viewport.containerSprite.buttonMode = false;							var targetCube:Cube = event.target as Cube;				var parentDO3D:DisplayObject3D = targetCube.parent as DisplayObject3D;				activeCube = targetCube;							var targetRotationY:Number = Math.round(parentDO3D.rotationY);				tempY = container.localRotationY;							// cube1				if(targetRotationY == 90) {					tweenCenterY(-90, range, tempY, parentDO3D);				// cube2				} else if(targetRotationY == 150) {					tweenCenterY(-30, range, tempY, parentDO3D);				// cube3				} else if(targetRotationY == 210) {					tweenCenterY(30, range, tempY, parentDO3D);				// cube4				} else if(targetRotationY == 270) {					tweenCenterY(90, range, tempY, parentDO3D);				// cube5				} else if(targetRotationY == 330) {					tweenCenterY(150, range, tempY, parentDO3D);				// cube6				} else if(targetRotationY == 30) {					tweenCenterY(-150, range, tempY, parentDO3D);				}			}		}				private function onCompleteRotationY(parentContainer:DisplayObject3D):void {			var pn:String = parentContainer.name;			var cn:String;			if(pn == "cubeContainer1") {				cn = "cube1";			} else if(pn == "cubeContainer2") {				cn = "cube2";			} else if(pn == "cubeContainer3") {				cn = "cube3";			} else if(pn == "cubeContainer4") {				cn = "cube4";			} else if(pn == "cubeContainer5") {				cn = "cube5";			} else if(pn == "cubeContainer6") {				cn = "cube6";			}						var targetCube:DisplayObject3D = parentContainer.getChildByName(cn);			Tweener.addTween(targetCube, {				z:				2000, 				time:			transitionTime / 2, 				onComplete:		onCompleteBlue,				transition:		"easeInOutSine"			});		}				private function onCompleteBlue():void {			setButton();		}				private function onCompleteGreen():void {			removeButton();			mode = "green";			if(viewport.containerSprite.buttonMode == false) {				viewport.containerSprite.buttonMode = true;			}			activeCube = null;		}				private function onBlueDisplayClickHandler(event:MouseEvent):void {			Tweener.addTween(activeCube, {				z:				0, 				time:			transitionTime / 2, 				onComplete:		onCompleteGreen,				transition:		transitionType			});		}	}}