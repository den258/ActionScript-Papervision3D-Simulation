package {	import flash.display.*;	import flash.events.*;	import flash.utils.*;		import org.papervision3d.scenes.Scene3D;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.*;	import org.papervision3d.cameras.*;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.materials.*;	import org.papervision3d.events.InteractiveScene3DEvent;	[SWF(width="1024", height="568", backgroundColor="#CCCCCC", frameRate="50")]	public class Main extends Sprite {			private var scene:Scene3D;		private var camera:Camera3D;		private var viewport:Viewport3D;		private var renderer:BasicRenderEngine;		private var planes:Array;				private var stageW:Number;		private var stageH:Number;		private var vpX:Number;		private var vpY:Number;				private var cameraInfo:CameraInfo;			private var time:Number = 0;		private var secondTime:Number = 0;		private var previousSecondTime:Number = 0;		private var frameNum:Number = 0;		private var fps:String = "...";				private var planeWidth:Number = 120;		private var planeHeight:Number = 90;		private var xNum:Number = 5;		private var zNum:Number = 4;		private var intervalX:Number = 20;		private var intervalZ:Number = 20;		private var centerX:Number;		private var centerZ:Number;		private var isDragging:Boolean;		private var mouseDownX:Number;		private var mouseDownY:Number;		private var cameraPitch:Number;		private var cameraYaw:Number;				public function Main () {						init();		}			private function init():void {			setStage();			setScene();			setCamera();			setDO3D();			setCameraInfo();						addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);			stage.addEventListener(Event.RESIZE, onStageResizeHandler);			stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDownHandler);			stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMoveHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUpHandler);		}				private function setStage():void {			stage.quality = StageQuality.MEDIUM;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;		}				private function setCameraInfo():void {			cameraInfo = new CameraInfo();			addChild(cameraInfo);			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function setScene():void{			renderer = new BasicRenderEngine();			scene = new Scene3D();			viewport  = new Viewport3D(0, 0, true, true);			viewport.buttonMode = true;			addChild(viewport);		}				private function setCamera():void {			camera = new Camera3D();			camera.x = 0;			camera.y = 300;			camera.z = -600;			camera.zoom = 30;			camera.focus = 30;			camera.target = DisplayObject3D.ZERO;			var cameraXfromTarget:Number = camera.x - camera.target.x;			var cameraYfromTarget:Number = camera.y - camera.target.y;			var cameraZfromTarget:Number = camera.z - camera.target.z;			cameraYaw = Math.atan2(cameraZfromTarget, cameraXfromTarget) * 180 / Math.PI;			cameraPitch = Math.atan2(-cameraZfromTarget, cameraYfromTarget) * 180 / Math.PI;		}				private function setDO3D():void {			planes = new Array();			centerX = ((intervalX + planeWidth) * (xNum - 1)) / 2;			centerZ = ((intervalZ + planeHeight) * (zNum - 1)) / 2;			var counter:int = 0;			for (var i:int = 0; i < zNum; i++) {				for (var j:int = 0; j < xNum; j++) {					var imagePass:String = "img/img_"+counter.toString()+".jpg";					var material:BitmapFileMaterial = new BitmapFileMaterial(imagePass, true);					material.oneSide = false;					material.smooth = true;					material.interactive = true;					var plane:Plane = new Plane(material, planeWidth, planeHeight, 2, 2);					plane.x = (intervalX + planeWidth) * j - centerX;					plane.z = (intervalZ + planeHeight) * i - centerZ;							plane.lookAt(camera);					scene.addChild(plane);					planes.push(plane);					plane.addEventListener(InteractiveScene3DEvent.OBJECT_CLICK, onClickHandler);					counter++;				}			}		}				private function getFPS():void {			time = getTimer();			secondTime = time - previousSecondTime;			if(secondTime >= 1000) {				fps = frameNum.toString();				frameNum = 0;				previousSecondTime = time;			} else {				frameNum++;			}			cameraInfo.fpsText.text = fps+"FPS";			cameraInfo.cameraX.text = camera.x.toString();			cameraInfo.cameraY.text = camera.y.toString();			cameraInfo.cameraZ.text = camera.z.toString();		}				private function onEnterFrameHandler(event:Event):void {			for(var i:int = 0; i < planes.length; i++) {				var plane:Plane = planes[i];				plane.lookAt(camera);			}			renderer.renderScene(scene, camera, viewport);			getFPS();		}				private function onStageResizeHandler(event:Event):void {			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function onMouseDownHandler(event:MouseEvent):void {			isDragging = true;			mouseDownX = mouseX;			mouseDownY = mouseY;		}				private function onMouseMoveHandler(event:MouseEvent):void {			var X:Number = (mouseX - mouseDownX) * 0.5;			var Y:Number = (mouseY - mouseDownY) * 0.5;			if(isDragging) {				cameraPitch -= Y;				cameraYaw -= X;				cameraPitch %= 360;				cameraYaw %= 360;				if(cameraPitch <= 0) {					cameraPitch = 0.1;				} else if(cameraPitch >= 180) {					cameraPitch = 179.9				}				mouseDownX = mouseX;				mouseDownY = mouseY;				camera.orbit(cameraPitch, cameraYaw, true, camera.target);			}		}				private function onMouseUpHandler(event:MouseEvent):void {			isDragging = false;		}				private function onClickHandler(event:InteractiveScene3DEvent):void {			var plane:Plane = event.target as Plane;			plane.scale = 1.5;			plane.addEventListener(InteractiveScene3DEvent.OBJECT_OUT, onOutHandler);		}				private function onOutHandler(event:InteractiveScene3DEvent):void {			var plane:Plane = event.target as Plane;			plane.scale = 1.0;			plane.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, onOutHandler);		}	}}