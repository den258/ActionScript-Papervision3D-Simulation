package {	import flash.display.*;	import flash.events.*;	import flash.utils.*;		import org.papervision3d.scenes.Scene3D;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.*;	import org.papervision3d.cameras.*;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.materials.*;	[SWF(width="1024", height="568", backgroundColor="#CCCCCC", frameRate="50")]	public class Main extends Sprite {			private var scene:Scene3D;		private var camera:Camera3D;		private var viewport:Viewport3D;		private var renderer:BasicRenderEngine;		private var planes:Array;				private var stageW:Number;		private var stageH:Number;		private var vpX:Number;		private var vpY:Number;				private var cameraInfo:CameraInfo;			private var time:Number = 0;		private var secondTime:Number = 0;		private var previousSecondTime:Number = 0;		private var frameNum:Number = 0;		private var fps:String = "...";				private var planeWidth:Number = 120;		private var planeHeight:Number = 90;		private var xNum:Number = 5;		private var zNum:Number = 5;		private var intervalX:Number = 20;		private var intervalZ:Number = 20;		private var centerX:Number;		private var centerZ:Number;				public function Main () {						init();		}			private function init():void {			setStage();			setScene();			setCamera();			setDO3D();			setCameraInfo();						addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);			stage.addEventListener(Event.RESIZE, onStageResizeHandler);		}				private function setStage():void {			stage.quality = StageQuality.MEDIUM;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;		}				private function setCameraInfo():void {			cameraInfo = new CameraInfo();			addChild(cameraInfo);			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function setScene():void{			renderer = new BasicRenderEngine();			scene = new Scene3D();			viewport  = new Viewport3D(0, 0, true, true);			addChild(viewport);		}				private function setCamera():void {			camera = new Camera3D();			camera.x = 0;			camera.y = 300;			camera.z = -600;			camera.zoom = 30;			camera.focus = 30;			camera.target = DisplayObject3D.ZERO;		}				private function setDO3D():void {			planes = new Array();			centerX = ((intervalX + planeWidth) * (xNum - 1)) / 2;			centerZ = ((intervalZ + planeHeight) * (zNum - 1)) / 2;			var material:BitmapFileMaterial = new BitmapFileMaterial("img.jpg", true);			material.oneSide = false;			material.smooth = true;			for (var i:int = 0; i < zNum; i++) {				for (var j:int = 0; j < xNum; j++) {					var plane:Plane = new Plane(material, planeWidth, planeHeight, 2, 2);					plane.x = (intervalX + planeWidth) * j - centerX;					plane.z = (intervalZ + planeHeight) * i - centerZ;							plane.lookAt(camera);					scene.addChild(plane);					planes.push(plane);				}			}		}				private function getFPS():void {			time = getTimer();			secondTime = time - previousSecondTime;			if(secondTime >= 1000) {				fps = frameNum.toString();				frameNum = 0;				previousSecondTime = time;			} else {				frameNum++;			}			cameraInfo.fpsText.text = fps+"FPS";			cameraInfo.cameraX.text = camera.x.toString();			cameraInfo.cameraY.text = camera.y.toString();			cameraInfo.cameraZ.text = camera.z.toString();		}			private function moveCameraX(angleX:Number):void {			var cosX:Number = Math.cos(angleX);			var sinX:Number = Math.sin(angleX);			camera.x = camera.x * cosX - camera.z * sinX;		}				private function moveCameraY(angleY:Number):void {			var cosY:Number = Math.cos(angleY);			var sinY:Number = Math.sin(angleY);			camera.y = camera.y * cosY - camera.z * sinY;		}				private function onEnterFrameHandler(event:Event):void {			motionDO3D();			renderer.renderScene(scene, camera, viewport);			getFPS();		}				private function onStageResizeHandler(event:Event):void {			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function motionDO3D():void {			var angleX:Number = (mouseX - vpX) * 0.0001;			var angleY:Number = (mouseY - vpY) * 0.0001;			moveCameraX(angleX);			moveCameraY(angleY);			for(var i:int = 0; i < planes.length; i++) {				var plane:Plane = planes[i];				plane.lookAt(camera);			}		}	}}