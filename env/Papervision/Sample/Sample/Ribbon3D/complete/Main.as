package {	import flash.display.*;	import flash.events.*;	import flash.utils.*;	import flash.filters.*;		import org.papervision3d.scenes.Scene3D;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.*;	import org.papervision3d.cameras.*;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.materials.*;	import org.papervision3d.materials.utils.MaterialsList;	import org.papervision3d.lights.PointLight3D;	import org.papervision3d.materials.shadematerials.*;		import caurina.transitions.*;	import caurina.transitions.properties.*;	import soulwire.papervision3d.Ribbon3D;	[SWF(width="1024", height="568", backgroundColor="#000000", frameRate="50")]	public class Main extends Sprite {			private var scene:Scene3D;		private var camera:Camera3D;		private var viewport:Viewport3D;		private var renderer:BasicRenderEngine;		private var light:PointLight3D;		private var container:DisplayObject3D;				private var cameraFollowTarget:DisplayObject3D;		private var cameraLookAtTarget:DisplayObject3D;		private var cameraLookAtTargetStation:DisplayObject3D;		private var satellites:Array = new Array();				private var cageSize:int = 500;		private var easing:Number = 0.01;		private var colors:Array = [			[0xECA72F, 0x442C05],			[0xD4EC2F, 0x3D4405], 			[0x76ED2E, 0x1D4405],			[0x2FEC49, 0x05440E],			[0x2FECA7, 0x05442C],			[0x332AEF, 0x060344],			[0x952AEF, 0x260344], 			[0xEF2AE4, 0x440341],			[0xEF2A82, 0x44031F],			[0xEF2A2A, 0x440303]		];		private var ribbonsNum:Number = 4;		private var ribbonWidth:Number = 10;		private var ribbonLength:Number = 200;		private var ribbons:Array = new Array();				private var stageW:Number;		private var stageH:Number;		private var vpX:Number;		private var vpY:Number;				private var cameraInfo:CameraInfo;			private var time:Number = 0;		private var secondTime:Number = 0;		private var previousSecondTime:Number = 0;		private var frameNum:Number = 0;		private var fps:String = "...";				public function Main () {						init();		}			private function init():void {			CurveModifiers.init();			setStage();			setScene();			setLight();			setCamera();			setDO3D();			setCameraInfo();						addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);			stage.addEventListener(Event.RESIZE, onStageResizeHandler);		}				private function setStage():void {			stage.quality = StageQuality.MEDIUM;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;		}				private function setCameraInfo():void {			cameraInfo = new CameraInfo();			addChild(cameraInfo);			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function setLight():void {			light = new PointLight3D(true);			light.x = 0;			light.y = 500;			light.z = -500;			scene.addChild(light);		}				private function setScene():void{			renderer = new BasicRenderEngine();			scene = new Scene3D();			viewport  = new Viewport3D(stageW, stageH, true, true);			addChild(viewport);		}				private function setCamera():void {			camera = new Camera3D();			camera.x = 0;			camera.y = 3000;			camera.z = -6000;			camera.zoom = 30;			camera.focus = 30;		}				private function setDO3D():void {			container = new DisplayObject3D();			scene.addChild(container);						var i:int;			var colorsNum:int = colors.length;			var shuffleColors:Array = new Array();			for (i = 0; i < colorsNum; i++) {				var n:int = Math.floor(randomNumber(colors.length));				shuffleColors[i] = colors[n];				colors.splice(n, 1);			}						for (i = 0; i < ribbonsNum; i++) {								var ribbonMaterial:FlatShadeMaterial = new FlatShadeMaterial(light, shuffleColors[i][0], shuffleColors[i][1]);				ribbonMaterial.oneSide = false;				var ribbon:Ribbon3D = new Ribbon3D(ribbonMaterial, ribbonWidth, ribbonLength);				container.addChild(ribbon);				ribbon.x = randomNumber(-cageSize, cageSize);				ribbon.y = randomNumber(-cageSize, cageSize);				ribbon.z = randomNumber(-cageSize, cageSize);				ribbons.push(ribbon);			}						for (i = 0; i < ribbonsNum; i++) {				var satellite:DisplayObject3D = new DisplayObject3D();				satellites.push(satellite);				tweenObject(satellite);			}						cameraFollowTarget = new DisplayObject3D();			cameraLookAtTarget = new DisplayObject3D();			cameraLookAtTargetStation = satellites[0];			tweenObject(cameraFollowTarget);		}				private function getFPS():void {			time = getTimer();			secondTime = time - previousSecondTime;			if(secondTime >= 1000) {				fps = frameNum.toString();				frameNum = 0;				previousSecondTime = time;			} else {				frameNum++;			}			cameraInfo.fpsText.text = fps+"FPS";			cameraInfo.cameraX.text = camera.x.toString();			cameraInfo.cameraY.text = camera.y.toString();			cameraInfo.cameraZ.text = camera.z.toString();		}			private function onEnterFrameHandler(event:Event):void {			motionDO3D();			motionCamera();			renderer.renderScene(scene, camera, viewport);			getFPS();		}				private function onStageResizeHandler(event:Event):void {			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function motionDO3D():void {			var i:int;			for (i = 0; i < ribbons.length; i++) {				ribbons[i].x += (satellites[i].x - ribbons[i].x) * easing;				ribbons[i].y += (satellites[i].y - ribbons[i].y) * easing;				ribbons[i].z += (satellites[i].z - ribbons[i].z) * easing;				ribbons[i].draw();			}		}				private function motionCamera():void {			cameraLookAtTarget.x += (cameraLookAtTargetStation.x - cameraLookAtTarget.x) * easing;			cameraLookAtTarget.y += (cameraLookAtTargetStation.y - cameraLookAtTarget.y) * easing;			cameraLookAtTarget.z += (cameraLookAtTargetStation.z - cameraLookAtTarget.z) * easing;						camera.x += (cameraFollowTarget.x - camera.x) * easing;			camera.y += (cameraFollowTarget.y - camera.y) * easing;			camera.z += (cameraFollowTarget.z - camera.z) * easing;						var distanceV:Number = camera.distanceTo(cameraLookAtTargetStation) / cageSize;			var focusV:Number = distanceV * 20;						camera.focus += (focusV - camera.focus ) * easing;			camera.lookAt(cameraLookAtTarget);		}				private function tweenObject(object:*):void {			if (object == cameraFollowTarget && Math.random() < 0.5) {				cameraLookAtTargetStation = satellites[Math.floor(randomNumber(satellites.length))];			}							Tweener.addTween(object, {				x:					randomNumber(-cageSize, cageSize),				y:					randomNumber(-cageSize, cageSize),				z:					randomNumber(-cageSize, cageSize),				_bezier:[{					x:				randomNumber(-cageSize, cageSize),					y:				randomNumber(-cageSize, cageSize),					z:				randomNumber(-cageSize, cageSize)				}],				time:				4, 				onComplete:			tweenObject,				onCompleteParams:	[object],				transition:			"linear"			});		}				private function randomNumber(min:Number, max:Number = NaN):Number {			if (isNaN(max)) {				max = min;				min = 0; 			}			return Math.random() * (max - min) + min;		}	}}