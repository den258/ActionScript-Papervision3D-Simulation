package {	import flash.display.*;	import flash.events.*;	import flash.utils.*;		import org.papervision3d.scenes.Scene3D;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.*;	import org.papervision3d.cameras.*;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.materials.*;	import org.papervision3d.materials.special.Letter3DMaterial;	import org.papervision3d.typography.Text3D;	import org.papervision3d.typography.fonts.*;		import caurina.transitions.*;	import caurina.transitions.properties.*;	[SWF(width="1024", height="568", backgroundColor="#CCCCCC", frameRate="50")]	public class Main extends Sprite {			private var scene:Scene3D;		private var camera:Camera3D;		private var viewport:Viewport3D;		private var renderer:BasicRenderEngine;		private var text3D:Text3D;		private var friction:Number = 0.93;		private var powerX:Number = 0;		private var powerY:Number = 0;		private var transitionTime:Number = 4;		private var mode:String = "yellow";				private var cameraStandardX:Number;		private var cameraStandardY:Number;		private var cameraStandardZ:Number;				private var stageW:Number;		private var stageH:Number;		private var vpX:Number;		private var vpY:Number;				private var cameraInfo:CameraInfo;			private var time:Number = 0;		private var secondTime:Number = 0;		private var previousSecondTime:Number = 0;		private var frameNum:Number = 0;		private var fps:String = "...";				private var isDragging:Boolean;		private var mouseDownX:Number;		private var mouseDownY:Number;				public function Main () {						init();		}			private function init():void {			CurveModifiers.init();			setStage();			setScene();			setCamera();			setDO3D();			setText3D();			setCameraInfo();			OpeningMotion();						addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);			stage.addEventListener(Event.RESIZE, onStageResizeHandler);			stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDownHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUpHandler);		}				private function setStage():void {			stage.quality = StageQuality.MEDIUM;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;		}				private function setCameraInfo():void {			cameraInfo = new CameraInfo();			addChild(cameraInfo);			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function setScene():void{			renderer = new BasicRenderEngine();			scene = new Scene3D();			viewport  = new Viewport3D(0, 0, true, true);			addChild(viewport);		}				private function setCamera():void {			camera = new Camera3D();			cameraStandardX = 400;			cameraStandardY = 400;			cameraStandardZ = -1000;			camera.zoom = 30;			camera.focus = 25;			camera.target = DisplayObject3D.ZERO;		}				private function setDO3D():void {						var material:WireframeMaterial = new WireframeMaterial(0x666666, 0.5);			material.oneSide = false;			var plane:Plane = new Plane(material, 5000, 5000, 8, 8);			plane.rotationX = 90;			plane.y = -200;			scene.addChild(plane);		}				private function setText3D():void {			var material:Letter3DMaterial = new Letter3DMaterial(0x333333, 1);			material.oneSide = false;			text3D = new Text3D("Flash 3D by Papervision3D", new HelveticaBold(), material);			text3D.x = 0;			text3D.y = 0;			text3D.z = 0;			text3D.scale = 1;			scene.addChild(text3D);		}				private function OpeningMotion():void {			var counter:int = 0;			for each (var word:DisplayObject3D in text3D.letters) {				var wordX:Number = word.x;				var wordY:Number = word.y;				var wordZ:Number = word.z;				word.x = 0;				word.y = 1000;				word.z = 0;				Tweener.addTween(word, {					x:				wordX,					y:				wordY,					z:				wordZ,					_bezier:[						{x:500, z:0}, {x:0, z:-500}, {x:-500, z:0}, {x:0, z:500}, 						{x:500, z:0}, {x:0, z:-500}, {x:-500, z:0}, {x:0, z:500}					],					time:			5, 					delay:			0.1 * counter,					transition:		Equations.easeInOutCubic				});				counter++;			}						camera.x = 0;			camera.y = 2000;			camera.z = 30000;			Tweener.addTween(camera, {				x:					cameraStandardX,				y:					cameraStandardY,				z:					cameraStandardZ,				time:				8, 				onComplete:			onCompleteOpeningMotion,				transition:			"easeOutQuint"			});		}				private function onCompleteOpeningMotion():void {			mode = "green";		}				private function getFPS():void {			time = getTimer();			secondTime = time - previousSecondTime;			if(secondTime >= 1000) {				fps = frameNum.toString();				frameNum = 0;				previousSecondTime = time;			} else {				frameNum++;			}			cameraInfo.fpsText.text = fps+"FPS";			cameraInfo.Mode.text = mode.toString();			cameraInfo.cameraX.text = camera.x.toString();			cameraInfo.cameraY.text = camera.y.toString();			cameraInfo.cameraZ.text = camera.z.toString();		}			private function onEnterFrameHandler(event:Event):void {			if(mode == "green") {				motionDO3D();				motionCamera();			}			/*			} else {				var counter:int = 0;				for each (var word:DisplayObject3D in text3D.letters) {					if(counter == 0) {						trace(word.x, word.z);					}					counter++;				}			}			*/			renderer.renderScene(scene, camera, viewport);			getFPS();		}				private function onStageResizeHandler(event:Event):void {			stageW = stage.stageWidth;			stageH = stage.stageHeight;			vpX = stageW / 2;			vpY = stageH / 2;			cameraInfo.x = stageW;			cameraInfo.y = stageH;		}				private function onMouseDownHandler(event:MouseEvent):void {			isDragging = true;			mouseDownX = mouseX;			mouseDownY = mouseY;		}				private function onMouseUpHandler(event:MouseEvent):void {			isDragging = false;		}				private function motionCamera():void {			if(!isDragging) {				powerX = powerX * friction;				if (Math.abs(powerX) < 0.05) {					powerX = 0;				}				powerY = powerY * friction;				if (Math.abs(powerY) < 0.05) {					powerY = 0;				}			} else {				powerX = - (mouseY - mouseDownY) * 0.02;				powerY = (mouseX - mouseDownX) * 0.02;			}			cameraRotateX(camera, powerX);			cameraRotateY(camera, powerY);		}				private function cameraRotateX(cameraObj:Camera3D, angleX:Number):void {			var rad:Number = - angleX * Math.PI / 180;			var pZ:Number = cameraObj.z;			var pY:Number = cameraObj.y;			var cosX:Number = Math.cos(rad);			var sinX:Number = Math.sin(rad);			cameraObj.z = pZ * cosX + pY * sinX;			cameraObj.y = pY * cosX - pZ * sinX;		}				private function cameraRotateY(cameraObj:Camera3D, angleY:Number):void {			var rad:Number = angleY * Math.PI / 180;			var pX:Number = cameraObj.x;			var pZ:Number = cameraObj.z;			var cosY:Number = Math.cos(rad);			var sinY:Number = Math.sin(rad);			cameraObj.x = pX * cosY + pZ * sinY;			cameraObj.z = pZ * cosY - pX * sinY;		}				private function motionDO3D():void {			if(Math.random() > 0.1){				rotateText3D();			}		}				private function rotateText3D():void {			var randomRX:Number = Math.round(Math.random() * 2 - 1) * 360;			var randomRY:Number = Math.round(Math.random() * 2 - 1) * 360;			var randomRZ:Number = Math.round(Math.random() * 2 - 1) * 360;			for each (var word:DisplayObject3D in text3D.letters) {				if(!Tweener.isTweening(word)) {										Tweener.addTween(word, {						rotationX:		word.rotationX + randomRX,						rotationY:		word.rotationY + randomRY, 						rotationZ:		word.rotationZ + randomRZ,						time:			transitionTime, 						transition:		Equations.easeInOutCubic					});				}			}		}	}}